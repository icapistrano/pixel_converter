{"version":3,"sources":["components/LogoLetter.js","components/Header.js","components/ColourPalette.js","components/Button.js","components/Slider.js","components/ColorPicker.js","components/Postcard.js","assets/normalMochi.jpg","App.js","reportWebVitals.js","index.js"],"names":["LogoLetter","letter","bgColour","moveY","className","style","background","marginTop","Header","ColourPalette","palette","updatePickerState","updateBoxToChange","colours","Object","values","width","length","map","colour","index","height","backgroundColor","onClick","num","Button","text","buttonClick","disableBtn","Slider","initialValue","onChangeCb","minVal","maxVal","type","min","max","defaultValue","onChange","e","ColorPicker","showColourPicker","colourToChange","updatePalette","draw","pixels","zIndex","position","top","right","bottom","left","onChangeComplete","color","rgb","colour_of_k","triangle","colors","Postcard","canvasId","canvasImage","requestImage","requestState","useState","kernelSize","setKernelSize","colourCluster","setColourCluster","colourPalette","setColourPalette","ownImage","setOwnImage","currentBase64","setCurrentBase64","canvasPixels","setCanvasPixels","showPicker","setShowPicker","boxToChange","setBoxToChange","data","block_size","colour_cluster","base64","useEffect","a","getCanvasBase64","base64String","response","drawPixelatedImage","showPixelateImageStartUp","canvas","document","getElementById","ctx","getContext","ctxData","getImageData","i","k","actualPoint","putImageData","img","Promise","resolve","reject","image","Image","src","onload","reduceImage","drawImage","toDataURL","split","wantedSize","aspectRatioW","aspectRatioH","pixelate","drawUserImage","str","target","accept","fileType","files","regexFileType","RegExp","match","url","URL","createObjectURL","id","clientHeight","clientWidth","sliderNewVal","parseInt","value","canvasUrl","createElement","href","download","click","App","sendingData","setSendingData","apiRequest","options","method","mode","cache","credentials","headers","body","JSON","stringify","fetch","json","dogImage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.66bdc8d3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst LogoLetter = ({ letter, bgColour, moveY }) => {\r\n    return (\r\n        <div className='logo-letter-container box-shadow' style={{ background: bgColour, marginTop: moveY }}>\r\n\r\n            <h1 className=\"pixel-font\">{letter}</h1>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LogoLetter\r\n","import React from 'react'\r\nimport LogoLetter from './LogoLetter'\r\n\r\nconst Header = () => {\r\n    return (\r\n\r\n        <div className=\"logo-grid-container\">\r\n            <LogoLetter letter='P' bgColour='#D30000'></LogoLetter>\r\n            <LogoLetter letter='I' bgColour='#E57C00'></LogoLetter>\r\n            <LogoLetter letter='X' bgColour='#E3CD00'></LogoLetter>\r\n            <LogoLetter letter='E' bgColour='#5FBD00'></LogoLetter>\r\n            <LogoLetter letter='L' bgColour='#008EAD'></LogoLetter>\r\n            <div></div>\r\n            <LogoLetter letter='M' bgColour='#D30000'></LogoLetter>\r\n            <LogoLetter letter='A' bgColour='#E57C00'></LogoLetter>\r\n            <LogoLetter letter='K' bgColour='#E3CD00'></LogoLetter>\r\n            <LogoLetter letter='E' bgColour='#5FBD00'></LogoLetter>\r\n            <LogoLetter letter='R' bgColour='#008EAD'></LogoLetter>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nconst ColourPalette = ({ palette, updatePickerState, updateBoxToChange }) => {\r\n\r\n    const colours = Object.values(palette);\r\n    const width = colours.length < 11 ? '35px' : '30px';\r\n\r\n    // toggles showing colour picker and update which colour div has been pressed\r\n    const changeColour = (num) => {\r\n        updatePickerState();\r\n        updateBoxToChange(num);\r\n    }\r\n\r\n    return (\r\n        <div className='colour-palette'>\r\n\r\n            {colours.map((colour, index) => (\r\n\r\n                <div key={index} style={{ width: width, height: width, backgroundColor: `rgb(${colour[0]}, ${colour[1]}, ${colour[2]})` }}\r\n                    onClick={() => { changeColour(index) }}>\r\n                </div>\r\n\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ColourPalette\r\n","import React from 'react'\r\n\r\nconst Button = ({ text, bgColour, buttonClick, disableBtn }) => {\r\n\r\n    const onCallback = () => {\r\n        if (disableBtn) {\r\n            return;\r\n        }\r\n\r\n        buttonClick();\r\n    }\r\n\r\n    return (\r\n        <button className=\"btns\" style={{ background: bgColour }} onClick={onCallback}>\r\n            <h3 className=\"pixel-font\">{text}</h3>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button\r\n","import React from 'react'\r\n\r\nconst Slider = ({ initialValue, onChangeCb, minVal, maxVal }) => {\r\n    return (\r\n        <input type=\"range\" min={minVal} max={maxVal} className=\"slider\" defaultValue={initialValue}\r\n            onChange={(e) => onChangeCb(e)}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Slider\r\n\r\n","'use strict'\r\n\r\nimport React from 'react'\r\nimport { TwitterPicker } from 'react-color'\r\n\r\nconst ColorPicker = ({ showColourPicker, colours, colourToChange, updatePalette, draw, pixels }) => {\r\n    const popover = {\r\n        zIndex: '10',\r\n    }\r\n    const cover = {\r\n        position: 'fixed',\r\n        top: '0px',\r\n        right: '0px',\r\n        bottom: '0px',\r\n        left: '0px',\r\n        zIndex: '0',\r\n    }\r\n\r\n    // updates colour palette and sets pixel targets to new colour\r\n    const updateColours = (color) => {\r\n        colours[colourToChange] = Object.values(color.rgb);\r\n        updatePalette(colours);\r\n        draw({ pixels: pixels, colour_of_k: colours });\r\n    }\r\n\r\n    // chosen colours, must be hex to trigger event clickes\r\n    const hex = ['#9195A2', '#232A74', '#140B49', '#24327D', '#8A85BC'];\r\n\r\n    return (\r\n        <div>\r\n            <div style={popover} className=\"control-container\">\r\n                <div style={cover} onClick={showColourPicker} />\r\n                <TwitterPicker onChangeComplete={updateColours} triangle=\"hide\" width=\"100%\" colors={hex} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ColorPicker","import React, { useState, useEffect } from 'react'\r\n\r\nimport ColourPalette from './ColourPalette'\r\nimport Button from './Button'\r\nimport Slider from './Slider'\r\nimport ColorPicker from './ColorPicker'\r\n\r\nconst Postcard = ({ canvasId, canvasImage, requestImage, requestState }) => {\r\n\r\n    const [kernelSize, setKernelSize] = useState(5);\r\n    const [colourCluster, setColourCluster] = useState(8);\r\n    const [colourPalette, setColourPalette] = useState();\r\n\r\n    const [ownImage, setOwnImage] = useState(false);\r\n    const [currentBase64, setCurrentBase64] = useState(null);\r\n    const [canvasPixels, setCanvasPixels] = useState();\r\n\r\n    const [showPicker, setShowPicker] = useState(false);\r\n    const [boxToChange, setBoxToChange] = useState(null)\r\n\r\n    let data = {\r\n        block_size: kernelSize,\r\n        colour_cluster: colourCluster,\r\n        base64: currentBase64\r\n    };\r\n\r\n    // useeffect invoke everytime, add[] to only invoke at start\r\n    // post request of dog \"mochi\" at start up only\r\n    useEffect(() => {\r\n        const showPixelateImageStartUp = async () => {\r\n            const base64String = await getCanvasBase64(canvasImage)\r\n            data.base64 = base64String;\r\n            const response = await requestImage(data);\r\n            setCanvasPixels(response.pixels);\r\n            drawPixelatedImage(response);\r\n        }\r\n        showPixelateImageStartUp();\r\n    }, []);\r\n\r\n\r\n    // draw data from api response to canvas\r\n    const drawPixelatedImage = ({ pixels, colour_of_k }) => {\r\n        const canvas = document.getElementById(canvasId);\r\n        const ctx = canvas.getContext('2d');\r\n        const ctxData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n        const data = ctxData.data;\r\n\r\n        const colours = colour_of_k;\r\n        setColourPalette(colour_of_k);\r\n\r\n        const step = 4;\r\n        for (let i = 0; i < pixels.length; i++) {\r\n            let k = pixels[i];\r\n            let actualPoint = i * step - 1;\r\n\r\n            data[actualPoint + 1] = colours[k][0];\r\n            data[actualPoint + 2] = colours[k][1];\r\n            data[actualPoint + 3] = colours[k][2];\r\n            if (actualPoint > 0) {\r\n                data[actualPoint] = 255;\r\n            }\r\n        }\r\n        ctx.putImageData(ctxData, 0, 0);\r\n    }\r\n\r\n    // draws original image onto canvas and return canvas base64\r\n    const getCanvasBase64 = (img) => {\r\n        return new Promise((resolve, reject) => {\r\n            const canvas = document.getElementById(canvasId);\r\n            const ctx = canvas.getContext('2d');\r\n            const wantedSize = 400;\r\n\r\n            const image = new Image();\r\n            image.src = img;\r\n\r\n            // wait for image to load before processing\r\n            image.onload = () => {\r\n                if (image.width > wantedSize || image.height > wantedSize) {\r\n                    reduceImage(image, wantedSize);\r\n                }\r\n\r\n                canvas.width = image.width;\r\n                canvas.height = image.height;\r\n\r\n                ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\r\n\r\n                const base64 = canvas.toDataURL();\r\n                const [_, base64String] = base64.split(',');\r\n                setCurrentBase64(base64String);\r\n                resolve(base64String);\r\n            };\r\n        })\r\n    }\r\n\r\n    // invoke when image too big\r\n    const reduceImage = (img, wantedSize) => {\r\n        let aspectRatioW, aspectRatioH;\r\n        if (img.width > img.height) {\r\n            aspectRatioW = 1;\r\n            aspectRatioH = img.height / img.width;\r\n\r\n        } else {\r\n            aspectRatioW = img.width / img.height;\r\n            aspectRatioH = 1;\r\n        }\r\n\r\n        img.width = wantedSize * aspectRatioW;\r\n        img.height = wantedSize * aspectRatioH;\r\n    }\r\n\r\n    // update state for box kernel\r\n    const updateBoxSizeValue = (e) => {\r\n        const sliderNewVal = parseInt(e.target.value);\r\n        setKernelSize(sliderNewVal);\r\n    }\r\n\r\n    // update state for k means clusters\r\n    const updateColourCluster = (e) => {\r\n        const sliderNewVal = parseInt(e.target.value);\r\n        setColourCluster(sliderNewVal);\r\n    }\r\n\r\n    // draws unpixelated image to canvas, request for pixelated data\r\n    const pixelate = async () => {\r\n        const response = await requestImage(data);\r\n        setCanvasPixels(response.pixels);\r\n        drawPixelatedImage(response);\r\n    }\r\n\r\n    // trigger input file when button is pressed\r\n    const openDialog = () => {\r\n        const file = document.getElementById('file-input');\r\n        file.click();\r\n    }\r\n\r\n    // checks if it's image and draws original image onto canvas, updates states\r\n    const drawUserImage = async (e) => {\r\n\r\n        const str = e.target.accept;\r\n        const fileType = e.target.files[0].type;\r\n\r\n        const regexFileType = new RegExp(fileType, 'g');\r\n        const checkRegEx = str.match(regexFileType);\r\n\r\n        if (checkRegEx === null) {\r\n            return;\r\n        }\r\n\r\n        setOwnImage(true);\r\n        const img = e.target.files[0];\r\n        const url = URL.createObjectURL(img);\r\n        await getCanvasBase64(url);\r\n        setColourPalette();\r\n    }\r\n\r\n    // save image when button is clicked\r\n    const saveImage = () => {\r\n        const canvas = document.getElementById(canvasId);\r\n        const canvasUrl = canvas.toDataURL('png');\r\n        const a = document.createElement('a');\r\n        a.href = canvasUrl;\r\n        a.download = 'pixelated.png';\r\n        a.click();\r\n    }\r\n\r\n    //toggle colour picker, cb for colour palette divs and when pressing outside picker\r\n    const showColourPicker = () => {\r\n        setShowPicker(!showPicker);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"postcard box-shadow\">\r\n\r\n            <div className=\"sub-header control-container\">\r\n                <h2 className=\"pixel-font\">Image to Pixel Converter</h2>\r\n            </div>\r\n\r\n            <div style={{ position: 'relative' }}>\r\n                <canvas id={canvasId}></canvas>\r\n\r\n                {requestState &&\r\n                    <div className=\"loading\" style={{ height: document.getElementById(canvasId).clientHeight, width: document.getElementById(canvasId).clientWidth }}>\r\n                        <h2 className=\"center pixel-font\">PIXELATING ...</h2>\r\n                    </div>\r\n                }\r\n            </div>\r\n\r\n            <div className=\"canvas-control\">\r\n                <div className=\"control-container\">\r\n                    <h3 className=\"pixel-font\">Pixel size: <span><h3 className='bold pixel-font'>{kernelSize}</h3></span> </h3>\r\n                    <Slider initialValue={colourCluster} minVal={1} maxVal={100} onChangeCb={updateBoxSizeValue}></Slider>\r\n                </div>\r\n\r\n                <div className=\"control-container\">\r\n                    <h3 className=\"pixel-font\">Colours from image: <span><h3 className='bold pixel-font'>{colourCluster}</h3></span> </h3>\r\n                    <Slider initialValue={colourCluster} minVal={1} maxVal={20} onChangeCb={updateColourCluster}></Slider>\r\n                </div>\r\n\r\n                {colourPalette ?\r\n                    <div className=\"control-container\">\r\n                        <h3 className=\"pixel-font\">Colour Palette</h3>\r\n                        <ColourPalette palette={colourPalette} updatePickerState={showColourPicker} updateBoxToChange={setBoxToChange}></ColourPalette>\r\n                    </div>\r\n                    :\r\n                    <div className=\"control-container\"></div>\r\n                }\r\n\r\n\r\n                {\r\n                    showPicker &&\r\n                    <ColorPicker showColourPicker={showColourPicker} colourToChange={boxToChange}\r\n                        updatePalette={setColourPalette} colours={colourPalette} pixels={canvasPixels} draw={drawPixelatedImage} />\r\n                }\r\n\r\n\r\n                {!ownImage ?\r\n                    <div className=\"button-grid\">\r\n                        <Button text=\"PIXELATE DOG\" bgColour=\"#E3CD00\" buttonClick={pixelate} disableBtn={requestState}></Button>\r\n                        <input type=\"file\" className=\"file-btn\" id=\"file-input\" accept=\"image/png, image/jpeg, image/jpg\" onChange={(e) => { drawUserImage(e) }} />\r\n                        <Button text=\"CHOOSE IMAGE\" bgColour=\"#008EAD\" buttonClick={openDialog} disableBtn={requestState}></Button>\r\n                    </div>\r\n                    :\r\n                    <div className=\"button-grid\">\r\n                        <Button text=\"PIXELATE IMAGE\" bgColour='#E3CD00' buttonClick={pixelate} disableBtn={requestState}></Button>\r\n                        <Button text=\"SAVE IMAGE\" bgColour=\"#5FBD00\" buttonClick={saveImage} disableBtn={requestState}></Button>\r\n                    </div>\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Postcard\r\n","export default __webpack_public_path__ + \"static/media/normalMochi.07ef3636.jpg\";","import './App.css';\nimport { useState } from 'react'\nimport Header from './components/Header'\nimport Postcard from './components/Postcard'\nimport dogImage from './assets/normalMochi.jpg'\n\nfunction App() {\n\n  const [sendingData, setSendingData] = useState(false);\n\n  // post request with base64, kernel size and number of colour clusters\n  // returns an array with pixel data representing cluster group\n  const apiRequest = async (data) => {\n    const url = 'https://pfft9x63fc.execute-api.eu-west-2.amazonaws.com/default/python_pixelator';\n\n    const options = {\n      method: 'POST',\n      mode: 'cors',\n      cache: 'no-cache',\n      credentials: 'same-origin',\n      headers: {\n        'Content-Type': 'text/plain'\n      },\n      body: JSON.stringify(data)\n    }\n\n    setSendingData(true);\n    const response = await fetch(url, options);\n    setSendingData(false);\n    return response.json();\n  }\n\n  return (\n    <div className=\"App\">\n      <Header></Header>\n\n      <div style={{ position: 'relative' }}>\n\n        <div className=\"centers\">\n          <Postcard canvasId=\"mochi\" canvasImage={dogImage} requestImage={apiRequest} requestState={sendingData}></Postcard>\n        </div>\n\n      </div>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}